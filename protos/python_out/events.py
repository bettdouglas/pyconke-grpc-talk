# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: domain.proto, event_service.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import List, Optional

import betterproto
import grpclib

from betterproto.lib.google import protobuf

@dataclass
class User(betterproto.Message):
    id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    email: str = betterproto.string_field(3)
    phone: str = betterproto.string_field(4)


@dataclass
class LatLng(betterproto.Message):
    latitude: float = betterproto.float_field(1)
    longitude: float = betterproto.float_field(2)


@dataclass
class Event(betterproto.Message):
    id: str = betterproto.string_field(1)
    title: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    # date time
    date: datetime = betterproto.message_field(4)
    # udration in hours
    duration: int = betterproto.int32_field(5)
    creator: "User" = betterproto.message_field(6)
    location: str = betterproto.string_field(7)
    latlng: "LatLng" = betterproto.message_field(8)


@dataclass
class ListEventRequest(betterproto.Message):
    # The parent resource name, for example, "shelves/shelf1"
    location: "LatLng" = betterproto.message_field(1)
    # The maximum number of items to return.
    page_size: int = betterproto.int32_field(2)
    # The next_page_token value returned from a previous List request, if any.
    previous_page: int = betterproto.int32_field(3)


@dataclass
class ListEventResponse(betterproto.Message):
    # The field name should match the noun "Event" in the method name. There will
    # be a maximum number of items returned based on the page_size field in the
    # request.
    events: List["Event"] = betterproto.message_field(1)
    # Token to retrieve the next page of results, or empty if there are no more
    # results in the list.
    next_page_token: int = betterproto.int32_field(2)


@dataclass
class GetEventRequest(betterproto.Message):
    # The field will contain name of the resource requested.
    id: str = betterproto.string_field(1)


@dataclass
class CreateEventRequest(betterproto.Message):
    # The Event resource to create. The field name should match the Noun in the
    # method name.
    event: "Event" = betterproto.message_field(1)


@dataclass
class UpdateEventRequest(betterproto.Message):
    # The Event resource which replaces the resource on the server.
    event: "Event" = betterproto.message_field(1)
    # The update mask applies to the resource. For the `FieldMask` definition,
    # see https://developers.google.com/protocol-
    # buffers/docs/reference/google.protobuf#fieldmask
    update_mask: protobuf.FieldMask = betterproto.message_field(2)


@dataclass
class DeleteEventRequest(betterproto.Message):
    # The resource name of the Event to be deleted.
    event_id: str = betterproto.string_field(1)


@dataclass
class GetEventResponse(betterproto.Message):
    # The field name should match the noun in the method name.
    event: "Event" = betterproto.message_field(1)


@dataclass
class CreateEventResponse(betterproto.Message):
    # The field name should match the noun in the method name.
    event: "Event" = betterproto.message_field(1)


@dataclass
class UpdateEventResponse(betterproto.Message):
    event: "Event" = betterproto.message_field(1)


class EventServiceStub(betterproto.ServiceStub):
    """
    Generated according to
    https://cloud.google.com/apis/design/standard_methods
    """

    async def list_events(
        self,
        *,
        location: Optional["LatLng"] = None,
        page_size: int = 0,
        previous_page: int = 0,
    ) -> ListEventResponse:
        request = ListEventRequest()
        if location is not None:
            request.location = location
        request.page_size = page_size
        request.previous_page = previous_page

        return await self._unary_unary(
            "/events.EventService/ListEvents",
            request,
            ListEventResponse,
        )

    async def get_event(self, *, id: str = "") -> GetEventResponse:
        request = GetEventRequest()
        request.id = id

        return await self._unary_unary(
            "/events.EventService/GetEvent",
            request,
            GetEventResponse,
        )

    async def create_event(
        self, *, event: Optional["Event"] = None
    ) -> CreateEventResponse:
        request = CreateEventRequest()
        if event is not None:
            request.event = event

        return await self._unary_unary(
            "/events.EventService/CreateEvent",
            request,
            CreateEventResponse,
        )

    async def update_event(
        self,
        *,
        event: Optional["Event"] = None,
        update_mask: Optional[protobuf.FieldMask] = None,
    ) -> UpdateEventResponse:
        request = UpdateEventRequest()
        if event is not None:
            request.event = event
        if update_mask is not None:
            request.update_mask = update_mask

        return await self._unary_unary(
            "/events.EventService/UpdateEvent",
            request,
            UpdateEventResponse,
        )

    async def delete_event(self, *, event_id: str = "") -> protobuf.Empty:
        request = DeleteEventRequest()
        request.event_id = event_id

        return await self._unary_unary(
            "/events.EventService/DeleteEvent",
            request,
            protobuf.Empty,
        )
